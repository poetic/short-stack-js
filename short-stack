#!/usr/bin/env node

var program = require('commander'),
    yaml = require('js-yaml'),
    fs   = require('fs'),
    object = require('./.short-stack/stack.json'),
    doc = './.short-stack/stack.yml',
    fd = fs.openSync(doc, 'a+'),
    jsontoyaml = yaml.dump(object),
    error,
    stdout,
    stderr;

program.version('2.0.0');

program
  .command('install [name]')
  .description('[not implemented] adds a new layer to your stack');

program
  .command('uninstall [name]')
  .alias('remove')
  .description('[not implemented] removes a layer from your stack')
  .action(function (name) {
    console.log('uninstalling %s', name);
  });

program
  .command('add [role]')
  .description('add role to stack')
  .option("-r, --run", "install this role now")
  .action(function(role, options) {
    var add = require('./lib/add'),
    run = options.run,
    addRole = require('child_process').exec;

    add.exec(addRole, role, run, object, fs, fd, error, stdout, stderr);
  });

program
  .command('search [query]')
  .description('searches for short-stack roles, if query is left blank it will display all short-stack roles available')
  .action(function(query) {
    var search = require('./lib/search'),
        searchQuery = require('child_process').exec;

    search.exec(searchQuery, query, error, stdout, stderr);

  });

program
  .command('list')
  .description('[not implemented] list current layers in your stack');

program
  .command('update')
  .description('[not implemented] updates your stack' );

program.parse(process.argv);

if (!program.args.length) program.help();
