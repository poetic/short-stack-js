#!/usr/bin/env node

var program = require('commander'),
    yaml = require('js-yaml'),
    fs   = require('fs'),
    object = require('./.short-stack/stack.json'),
    doc = './.short-stack/stack.yml',
    fd = fs.openSync(doc, 'a+'),
    jsontoyaml = yaml.dump(object),
    version = require('./package.json').version,
    error,
    stdout,
    stderr;

program.version(version);

program
  .command('install')
  .description('installs your stack')
  .action(function () {
    var install = require('./lib/install'),
        installer = require('child_process').exec;

    install.exec(installer, error, stdout, stderr);
  });

program
  .command('add [role]')
  .description('add role to stack')
  .option("-r, --run", "install this role now")
  .action(function(role, options) {
    var add = require('./lib/add'),
    run = options.run,
    addRole = require('child_process').exec;

    add.exec(addRole, role, run, object, fs, fd, error, stdout, stderr);
  });

program
  .command('remove [role]')
  .alias('rm')
  .description('removes a layer from your stack')
  .action(function (role) {
    var remove = require('./lib/remove');
    console.log('removing %s', role);

    remove.exec(fs, object, role);
  });

program
  .command('search [query]')
  .description('searches for short-stack roles')
  .action(function(query) {
    var search = require('./lib/search'),
        searchQuery = require('child_process').exec;

    search.exec(searchQuery, query, error, stdout, stderr);

  });

program
  .command('list')
  .description('list current layers in your stack')
  .action(function () {
    var list = require('./lib/list'),
        lister = require('child_process').exec;

    list.exec(lister, error, stdout, stderr);
  });

program.parse(process.argv);

if (!program.args.length)  program.outputHelp(colorize);

function colorize(txt) {
  var chalk = require('chalk');
  return chalk.white(txt);
}
